#!perl
use 5.020;
#use Filter::signatures;
use feature 'signatures';
no warnings 'experimental::signatures';

use Filesys::DB;
use DBIx::RunSQL;
use Getopt::Long;
use YAML 'LoadFile';
use PerlX::Maybe;
use Text::Table;

use Lingua::Stem;
use Lingua::Stem::Cistem;

GetOptions(
    'mountpoint|m=s' => \my $mountpoint,
    'alias|a=s' => \my $mount_alias,
    'config|f=s' => \my $config_file,
);

my $sql = join " ", @ARGV;
$sql //= <<'SQL';
        html is not null
    and mime_type='application/pdf'
SQL

my $config = {};
my $user_config = {};
if(! defined $config_file ) {
    if ( 'filesys-db.yaml' ) {
        $config_file = 'filesys-db.yaml';
    } else {
        $user_config = {
            mountpoints => [
                {
                  alias => $mount_alias // '${MOUNT}',
                  directory => $mountpoint //  $ARGV[0],
                }
            ],
        }
    }
}
if( $config_file ) {
    $user_config = LoadFile( $config_file );
};
$user_config->{mountpoints} //= {};
$config->{mountpoints} = $user_config->{mountpoints};

my $store = Filesys::DB->new(
    mountpoints => {
        %{ $config->{mountpoints} },
        maybe $mount_alias => $mountpoint,
    },
);

my @docs = $store->_inflate_sth( $store->entries( undef, $sql ));

use DBD::SQLite::Constants ':fts5_tokenizer';
use locale;
our $tokenizer_language;

sub get_stemmer( $language ) {
    if( fc $language eq fc 'de' ) {
        return \&Lingua::Stem::Cistem::stem;
    } else {
        my $stem = Lingua::Stem->new(-language => $language );
        return sub( @terms ) {
            return $stem->stem( @terms )
        };
    }
}

# Another horrible idea: Parsing the text in an HTML file (hopefully
# generated by Tika) using a regular expression
# We convert the HTML to ['text',startpos,endpos]
sub locale_tika_tokenizer { # see also: Search::Tokenizer
    my $stemmer = get_stemmer( $tokenizer_language );
    return sub( $ctx, $string, $tokenizer_context_flags ) {

    my @res;
    # Find next non-tag chunk:
    my $start_ofs;
    while( $string =~ /(?:^|>)([^<>]*)(?:<|$)/g ) {
        # Extract tokens from that part
        $start_ofs = $-[1];
        my $run = $1;
        while( $run =~ /(\w+)/g ) {
            # push @res, [$1,$start_ofs+$-[0], $+[0]];
            my ($start, $end) = ($-[0], $+[0]);
            #my $term = substr($string, $start, my $len = $end-$start);
            my $term = "$1";
            $start += $start_ofs;
            $end   += $start_ofs;

            # say sprintf "%s <%s>", $term, substr( $string, $start, $end-$start);

            my $flags = 0;
            DBD::SQLite::db::fts5_xToken($ctx,$flags,$term,$start,$end);

            my @collocated = $stemmer->($term);

            # also push synonyms here

            $flags = FTS5_TOKEN_COLOCATED;
            for my $t (@collocated) {
                if( $t ne $term ) {
                    DBD::SQLite::db::fts5_xToken($ctx,$flags,$t,$start,$end);
                }
            }

        }
    }
  };
}

for my $doc (@docs) {
    my( $entry_id) = $doc->{ 'entry_id' };
    my( $html) = $doc->{ content }->{ html };
    my( $title ) = $doc->{ content }->{ title };

    local $main::item_language = $doc->{content}->{language};

    my $tmp_res = $store->selectall_named(<<'', $entry_id, $language, $html, $title )->[0];
        INSERT INTO filesystem_entry_fts5(content, title, language, entry_id)
             VALUES(:html, :title, :language, :entry_id)

}
